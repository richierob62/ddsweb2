SETUP DEV ENVIRONMENT
===============================================================================================================
    VirtualBox: https://www.virtualbox.org/wiki/Downloads
    Vagrant : https://www.vagrantup.com/
    vagrant box add laravel/homestead
    ------------------------------------------------------
    cd ~
    git clone https://github.com/laravel/homestead.git Homestead
    cd Homestead
    bash init.sh
    ------------------------------------------------------
    Homestead.yaml
    ------------------------------------------------------
    C:\Windows\System32\drivers\etc\hosts
    192.168.10.10  homestead.app
    ------------------------------------------------------
    cd ~/Homestead
    vagrant up
    vagrant suspend
    vagrant resume
    vagrant reload --provision
    vagrant provision
    vagrant destroy --force
    vagrant box update
    ------------------------------------------------------
    HTTP: 80 (guest) => 8000 (host) 
    HTTPS: 443 (guest) => 44300 (host) 
    MySQL: 3306 (guest) => 33060 (host) 
    Postgres: 5432 (guest) => 54320 (host) 
    27017 (guest) => 27017 (host) 
    SSH: 22 (guest) => 2222 (host) 
    ------------------------------------------------------
    cd ~/Homestead
    vagrant ssh
    2222 â†’ Forwards To 22
    ------------------------------------------------------
    /.homestead/aliases
    ------------------------------------------------------
    Database
    127.0.0.1
    Navicat: port 33060 (MySQL)
    Laravel: port 3306 (MySQL)
    username: homestead
    password: secret
    ------------------------------------------------------
    composer global require "laravel/installer"
    lumen new projectname
    .env
    composer update
    composer require laravel/dusk




MIGRATIONS    
===============================================================================================================
    php artisan make:migration create_users_table
    php artisan make:migration create_users_table --create=users
    php artisan make:migration add_votes_to_users_table --table=users
    php artisan migrate
    php artisan migrate --force
    php artisan migrate:rollback
    php artisan migrate:rollback --step=5
    php artisan migrate:reset
    php artisan migrate:refresh
    php artisan migrate:refresh --seed
    php artisan migrate:refresh --step=5
    ------------------------------------------------------
    Schema::table('flights', function (Blueprint  $table) {
        $table->engine = 'InnoDB';
        $table->bigIncrements('id');	Incrementing ID (primary key) using a "UNSIGNED BIG INTEGER" equivalent.
        $table->bigInteger('votes');	BIGINT equivalent for the database.
        $table->binary('data');	BLOB equivalent for the database.
        $table->boolean('confirmed');	BOOLEAN equivalent for the database.
        $table->char('name', 4);	CHAR equivalent with a length.
        $table->date('created_at');	DATE equivalent for the database.
        $table->dateTime('created_at');	DATETIME equivalent for the database.
        $table->dateTimeTz('created_at');	DATETIME (with timezone) equivalent for the database.
        $table->decimal('amount', 5, 2);	DECIMAL equivalent with a precision and scale.
        $table->double('column', 15, 8);	DOUBLE equivalent with precision, 15 digits in total and 8 after the decimal point.
        $table->enum('choices', ['foo', 'bar']);	ENUM equivalent for the database.
        $table->float('amount', 8, 2);	FLOAT equivalent for the database, 8 digits in total and 2 after the decimal point.
        $table->increments('id');	Incrementing ID (primary key) using a "UNSIGNED INTEGER" equivalent.
        $table->integer('votes');	INTEGER equivalent for the database.
        $table->ipAddress('visitor');	IP address equivalent for the database.
        $table->json('options');	JSON equivalent for the database.
        $table->jsonb('options');	JSONB equivalent for the database.
        $table->longText('description');	LONGTEXT equivalent for the database.
        $table->macAddress('device');	MAC address equivalent for the database.
        $table->mediumIncrements('id');	Incrementing ID (primary key) using a "UNSIGNED MEDIUM INTEGER" equivalent.
        $table->mediumInteger('numbers');	MEDIUMINT equivalent for the database.
        $table->mediumText('description');	MEDIUMTEXT equivalent for the database.
        $table->morphs('taggable');	Adds unsigned INTEGER taggable_id and STRING taggable_type.
        $table->nullableMorphs('taggable');	Nullable versions of the morphs() columns.
        $table->nullableTimestamps();	Nullable versions of the timestamps() columns.
        $table->rememberToken();	Adds remember_token as VARCHAR(100) NULL.
        $table->smallIncrements('id');	Incrementing ID (primary key) using a "UNSIGNED SMALL INTEGER" equivalent.
        $table->smallInteger('votes');	SMALLINT equivalent for the database.
        $table->softDeletes();	Adds nullable deleted_at column for soft deletes.
        $table->string('email');	VARCHAR equivalent column.
        $table->string('name', 100);	VARCHAR equivalent with a length.
        $table->text('description');	TEXT equivalent for the database.
        $table->time('sunrise');	TIME equivalent for the database.
        $table->timeTz('sunrise');	TIME (with timezone) equivalent for the database.
        $table->tinyInteger('numbers');	TINYINT equivalent for the database.
        $table->timestamp('added_on');	TIMESTAMP equivalent for the database.
        $table->timestampTz('added_on');	TIMESTAMP (with timezone) equivalent for the database.
        $table->timestamps();	Adds nullable created_at and updated_at columns.
        $table->timestampsTz();	Adds nullable created_at and updated_at (with timezone) columns.
        $table->unsignedBigInteger('votes');	Unsigned BIGINT equivalent for the database.
        $table->unsignedInteger('votes');	Unsigned INT equivalent for the database.
        $table->unsignedMediumInteger('votes');	Unsigned MEDIUMINT equivalent for the database.
        $table->unsignedSmallInteger('votes');	Unsigned SMALLINT equivalent for the database.
        $table->unsignedTinyInteger('votes');	Unsigned TINYINT equivalent for the database.
        $table->uuid('id');	UUID equivalent for the database.
    });
    ------------------------------------------------------
        ->after('column')	Place the column "after" another column (MySQL Only)
        ->comment('my comment')	Add a comment to a column
        ->default($value)	Specify a "default" value for the column
        ->first()	Place the column "first" in the table (MySQL Only)
        ->nullable()	Allow NULL values to be inserted into the column
        ->storedAs($expression)	Create a stored generated column (MySQL Only)
        ->unsigned()	Set integer columns to UNSIGNED
        ->virtualAs($expression)	Create a virtual generated column (MySQL Only)
        ------------------------------------------------------
        $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
        $table->index(['account_id', 'created_at']);	
        $table->index('email', 'my_index_name');	
        $table->index('state');	Add a basic index.
        $table->primary(['first', 'last']);	Add composite keys.
        $table->primary('id');	Add a primary key.
        $table->string('email')->unique();	
        $table->unique(['first', 'last']);	Add a composite unique index.
        $table->unique('email');	Add a unique index.
        $table->unique('state', 'my_index_name');	Add a custom index name.    
        ------------------------------------------------------
    Schema::rename($from, $to);
    Schema::drop('users');
    Schema::dropIfExists('users');    
    Schema::enableForeignKeyConstraints();
    Schema::disableForeignKeyConstraints();    
    ------------------------------------------------------





ROUTES & MIDDLEWARE
===============================================================================================================
    $this->middleware('auth',  ['only' => ['fooAction','barAction'], ['except' => ['fooAction','barAction'])
    config($string)
    config([$string => $string])
    env($string, $default)
    app()->environment()
    ------------------------------------------------------
    $app->get($uri, $callback)
    $app->post($uri, $callback)
    $app->put($uri, $callback)
    $app->patch($uri, $callback)
    $app->delete($uri, $callback)
    $app->options($uri, $callback)
    ------------------------------------------------------
    $app->group(
        [
            'middleware' => 'some_middleware:param',
            'namespace' => 'SomeNamespace',
            'prefix' => 'some_prefix/{some_param}'
        ], 
        function () use ($app) {
        $app->http_verb('some_url/{other_param}', 
        [
            'middleware' => 'some_middleware_2:param_2',
            'as' => 'route_name', 
            'uses' => 'ControllerName@method' 
        ])
    })
    ------------------------------------------------------
    bootstrap/app.php
    $app->middleware()
    $app->routeMiddleware()
    app/Http/Middleware
    ------------------------------------------------------
    bootstrap/app.php
    $app->register(App\Providers\AppServiceProvider::class)
    $app->register(App\Providers\AuthServiceProvider::class)
    $app->register(App\Providers\EventServiceProvider::class)
    app/Providers
    ------------------------------------------------------
    Gate::define('update-post', function ($user, $post) {
        return $user->id === $post->user_id
    })
    app/Providers/AuthServiceProvider
    if (Gate::allows('update-post', $post))
    if (Gate::denies('update-post', $post))
    if (Gate::forUser($user)->allows('update-post', $post))
    if (Gate::forUser($user)->denies('update-post', $post))




REQUESTS
===============================================================================================================
    $request->all()
    $request->except(['credit_card'])
    $request->file('photo')
    $request->file('photo')->isValid()
    $request->file('photo')->move($destinationPath)
    $request->file('photo')->move($destinationPath, $fileName)
    $request->fullUrl()
    $request->has('name'))
    $request->hasFile('photo'))
    $request->input('name')
    $request->input('products.*.name')
    $request->input('products.0.name')
    $request->is('admin/*')
    $request->isMethod('post')
    $request->method()
    $request->only(['username', 'password'])
    $request->path()
    $request->url()
    $request->user()
    ------------------------------------------------------
    $response->header('Content-Type', $value)
    $response->withHeaders(['Content-Type' => $type, 'foo' => 'bar'])
    response($content, $status)
    response()->download($pathToFile)
    response()->download($pathToFile, $name, $headers)
    response()->json($array)
    response()->json($array)->setCallback($callback)
    response()->json(['error' => 'Unauthorized'], 401, ['X-Header-One' => 'Header Value'])
    ------------------------------------------------------
    redirect()->route('name', ['param' => $value])
    redirect('home/dashboard')
    ------------------------------------------------------




QUERIES & MODELS
===============================================================================================================
    transaction:
        app('db')->beginTransaction()
        app('db')->commit()
        app('db')->rollBack()
        app('db')->transaction(function, attempts)
        lockForUpdate()->
        sharedLock()->
    ------------------------------------------------------
    table/join:
        app('db')->table('table_1')->
        app('db')->table('table_1')->crossJoin('table_2')->
        app('db')->table('table_1')->join('table_2', function ($joinClause) { ... })->
        app('db')->table('table_1')->join('table_2', 'table_1.id', '=', 'table_2.user_id')->
        app('db')->table('table_1')->leftJoin('posts', 'table_1.id', '=', 'posts.user_id')->
    ------------------------------------------------------
    joinclause:    
        $joinClause->on('table_1.id', '=', 'table_2.user_id')
        $joinClause->orOn('table_1.id', '=', 'table_2.user_id')
        $joinClause->orWhere('table_2.user_id', '>', 5)
        $joinClause->where('table_2.user_id', '>', 5)
    ------------------------------------------------------
    selects:
        addSelect('field_1')->
        select("SELECT * FROM table_1")->
        select(DB::raw('count(*) as field_1, field_2'))->
        select(DB::raw('SUM(field_1) as field_1'))->
        select('field_1')->
        select('field_1', 'field_2 as field_2')->
        select('field_1', 'field_2')->
        select('select * from table_1 where id = :id', ['id' => 1])->
    ------------------------------------------------------
    fields:
        DB::raw('count(*) as field_1')
        DB::raw('SUM(field_1) as field_1')
    ------------------------------------------------------
    criteria:
        distinct()->
        limit(5)->    
        offset(10)->
        orWhere(function ($query) { $query->... })->
        skip(10)->
        take(5)->
        when($value, function ($query) use ($value) { return $query->... })->
        where([['status', '=', '1'],['subscribed', '<>', '1']])->
        where('id', 1)->
        where('status', '<>', 1)->
        whereBetween('votes', [1, 100])->
        whereColumn([['first_name', '=', 'last_name'],['updated_at', '>', 'created_at']])->
        whereColumn('first_name', 'last_name')->
        whereColumn('updated_at', '>', 'created_at')->
        whereDate('created_at', '2016-12-31')->
        whereDay('created_at', '2016-12-31')->
        whereExists(function ($query) { $query->... })->
        whereIn('id', [1, 2, 3])->
        whereMonth('created_at', '2016-12-31')->
        whereNotBetween('votes', [1, 100])->
        whereNotIn('id', [1, 2, 3])->
        whereNotNull('updated_at')->
        whereNull('updated_at')->
        whereRaw('table_1.user_id = table_2.id')->
        whereYear('created_at', '2016-12-31')->
    ------------------------------------------------------
    order/grouping:
        groupBy('department')->
        inRandomOrder()->
        latest()->
        orderBy('id')->
        orderBy('name', 'desc')->
    ------------------------------------------------------
    aggregate criteria:
        having('account_id', '>', 100)->
        havingRaw('SUM(price) > 2500')->
    ------------------------------------------------------
    action:
        avg()
        chunk(100, function ($table_1) {...}
        count()
        decrement('votes')
        decrement('votes', 5)
        delete()
        first()
        get()
        increment('votes')
        increment('votes', 5)
        insert(['email' => 'john@example.com', 'votes' => 0])
        insert('insert into table_1 (id, name) values (?, ?)', [1, 'Dayle'])
        insertGetId(['email' => 'john@example.com', 'votes' => 0])
        max()
        min()
        pluck('title')
        pluck('title', 'name')
        statement('drop table table_1')
        truncate()
        update(['votes' => 1])
        update('update table_1 set votes = 100 where name = ?', ['John'])
        value('email')
    ------------------------------------------------------        
    bootstrap/app.php
    $app->withEloquent()
    ------------------------------------------------------
    model class
        namespace App
        use Illuminate\Database\Eloquent\Model
        use Illuminate\Notifications\Notifiable;

        class MyModel
        {
            const CREATED_AT = 'creation_date'
            const UPDATED_AT = 'last_update'

            protected $table = 'my_flights'
            protected $fillable = ['name'];
            protected $guarded = ['price'];
            protected $dates = ['deleted_at'];
            protected $dateFormat = 'U'
            protected $connection = 'connection-name'
            protected static function boot()
            {
                parent::boot();
                static::addGlobalScope(new MyGlobalScope);
                static::addGlobalScope('age', function (Builder $builder) {
                    $builder->where('age', '>', 200);
                });
            }    
            protected $events = [ 'event_name' => MyEvent::class  ];    

            public $primaryKey = 'foo'
            public $incrementing= false
            public $timestamps = false
            public function scopeMyLocalScope($query) {...}
            public function scopeMyLocalScope($query, $param) {..}

            public function phone() { return $this->hasOne('App\Phone');  }

            public function comments() { return $this->hasMany('App\Comment');  }
            public function roles() { return $this->belongsToMany('App\Role'); }            
            public function roles() { return $this->belongsToMany('App\Role', 'user_roles', 'user_id', 'role_id'); }  

            public function posts() { return $this->hasManyThrough('App\Post', 'App\User'); }

            public function imageable() { return $this->morphTo(); }
            public function photos()  { return $this->morphMany('App\Photo', 'imageable'); }

            public function tags() { return $this->morphToMany('App\Tag', 'taggable'); }
            public function posts() { return $this->morphedByMany('App\Post', 'taggable'); }

        }
    ------------------------------------------------------
    Model
        Model::all()
        Model::chunk(200, function ($flights) {...})
        Model::where('foo', 'bar')->cursor()
        Model::withTrashed()->where('airline_id', 1)->restore();
        Model::find(1)
        Model::where('active', 1)->first()
        Model::find([1, 2, 3])
        Model::findOrFail(1)
        Model::firstOrCreate(['name' => 'Flight 10']);
        Model::firstOrNew(['name' => 'Flight 10']);
        Model::where('legs', '>', 100)->firstOrFail()
        Model::create(['name' => 'Flight 10']);
        Model::destroy(1);
        Model::destroy([1, 2, 3]);
        Model::updateOrCreate(['departure' => 'Oakland', 'destination' => 'San Diego'],['price' => 99]);
        Model::where('active', 0)->delete();
        Model::withTrashed()
        Model::onlyTrashed()
        Model::withoutGlobalScope(MyGlobalScope::class)->get();
        Model::withoutGlobalScopes()->get();
        Model::withoutGlobalScopes([ FirstScope::class, SecondScope::class])->get();
        Model::myLocalScope()->get();
        Model::myLocalScope($param)->get();
    ------------------------------------------------------
    model instance
        $model = new Model
        $model->save()
        $model->update(['delayed' => 1])
        $model->fill(['name' => 'Flight 22']);
        $model->delete();
        $model->trashed()
        $model->restore();
        $model->forceDelete()
    ------------------------------------------------------
    relationships
        $model->history()->withTrashed()->get();
        $model->history()->forceDelete();
        $book->author()->associate($someAuthorModelInstance); //belongsTo 
        $user->roles()->sync([1,2,3]); //belongsToMany 
    ------------------------------------------------------
    global scope
        use Illuminate\Database\Eloquent\Scope;
        use Illuminate\Database\Eloquent\Builder;
        use Illuminate\Database\Eloquent\Model;
        class MyGlobalScope implements Scope {
            public function apply(Builder $builder, Model $model)
            {
                $builder->where('age', '>', 200);
            }
        }
    ------------------------------------------------------





COLLECTIONS
===============================================================================================================
    collect([1, 2, 3])
    ->all()
    ->avg()
    ->avg('pages')
    ->chunk(4)
    ->collapse()
    ->combine(['George', 29])
    ->contains('Desk')
    ->contains(function ($value, $key) {...})
    ->contains('product', 'Bookcase')
    ->contains->
    ->count()
    ->diff([2, 4, 6, 8])
    ->diffKeys([...])
    ->each(function ($item, $key) {...})
    ->each->
    ->every(function ($value, $key) {...})
    ->every->
    ->except(['price', 'discount'])
    ->filter(function ($value, $key) {...})
    ->filter->
    ->first()
    ->first(function ($value, $key) {...})
    ->first->
    ->flatMap(function ($values) {...})
    ->flatten()
    ->flatten(1)
    ->flip()
    ->forget('name')
    ->forPage(2, 3)
    ->get('email', function () {...})
    ->get('foo', 'default-value')
    ->get('name')
    ->groupBy('account_id')
    ->groupBy(function ($item, $key) {...})
    ->has('product')
    ->implode('-')
    ->implode('product', ', ')
    ->intersect(['Desk', 'Chair', 'Bookcase'])
    ->isEmpty()
    ->keyBy(function ($item) {...})
    ->keyBy('product_id')
    ->keys()
    ->last()
    ->last(function ($value, $key) {...})
    ->map(function ($item, $key) {...})
    ->map->
    ->mapWithKeys(function ($item) {...})
    ->max('foo')
    ->merge(['Bookcase', 'Door'])
    ->merge(['price' => 200, 'discount' => false])
    ->min()
    ->min('foo')
    ->nth(4)
    ->nth(4, 1)
    ->only(['product_id', 'name'])
    ->partition(function ($i) {...})
    ->partition->
    ->pipe(function ($collection) {...})
    ->pluck('name')
    ->pluck('name', 'product_id')
    ->pop()
    ->prepend(0)
    ->prepend(0, 'zero')
    ->pull('name')
    ->push(5)
    ->put('price', 100)
    ->random()
    ->random(3)
    ->reduce(function ($carry, $item) {...}, $initial)
    ->reject(function ($value, $key) {...})
    ->reject->
    ->reverse()
    ->search(4)
    ->search('4', true)
    ->search(function ($item, $key) {...})
    ->shift()
    ->shuffle()
    ->slice(4)
    ->slice(4, 2)
    ->sort()
    ->sortBy(function ($product, $key) {...})
    ->sortBy('price')
    ->sortBy->
    ->sortByDesc(function ($product, $key) {...})
    ->sortByDesc('price')
    ->sortByDesc->
    ->splice(2)
    ->splice(2, 1)
    ->splice(2, 1, [10, 11])
    ->split(3)
    ->sum()
    ->sum(function ($product) {...})
    ->sum('pages')
    ->sum->
    ->take(-2)
    ->take(3)
    ->toArray()
    ->toJson()
    ->transform(function ($item, $key) {...})
    ->union([3 => ['c'], 1 => ['b']])
    ->unique()
    ->unique('brand')
    ->unique(function ($item) {...})
    ->values()
    ->when($cond, function ($collection) {...})
    ->where('price', 100)
    ->whereIn('price', [150, 200])
    ->whereInStrict('price', [150, 200])
    ->whereStrict('price', 100)
    ->zip([100, 200])





MODEL EVENTS
===============================================================================================================
    creating
    created
    updating
    updated
    saving
    saved
    deleting
    deleted
    restoring
    restored
    ------------------------------------------------------
    class MyObserver 
    {
        public function event_name(MyModel $model) {...}
    }
    ------------------------------------------------------
    class AppServiceProvider extends ServiceProvider
    {
        public function boot() { MyModel::observe(MyObserver::class);  }
    }





CUSTOM EVENTS
===============================================================================================================    
    EventServiceProvider
        protected $listen = [ 'App\Events\ExampleEvent' => ['App\Listeners\ExampleListener', ],];
        protected $subscribe = ['App\Listeners\MySubscriber',];
    ------------------------------------------------------
    app/Events
        class MyEvent { 
            use SerializesModels;
            public function __construct(Model $model) {...} 
        }
    ------------------------------------------------------
    app/Listeners
        namespace App\Listeners;
        use Illuminate\Contracts\Queue\ShouldQueue;
        class MyListener implements ShouldQueue
        {
            public $connection = 'sqs';
            public $queue = 'listeners';
            public function handle(MyEvent $event) {...}
            public function failed(MyEvent $event, $exception) {...}
        }
    ------------------------------------------------------
    app/Listeners
        namespace App\Listeners
        use Illuminate\Contracts\Queue\ShouldQueue;
        class MySubscriber implements ShouldQueue
        {
            public function myEventHandler_1($event) {}
            public function myEventHandler_2($event) {}
            public function subscribe($events)
            {
                $events->listen( 'Illuminate\Auth\Events\MyEvent1', 'App\Listeners\MySubscriber@myEventHandler_1' );
                $events->listen( 'Illuminate\Auth\Events\MyEvent2', 'App\Listeners\MySubscriber@myEventHandler_2' );
            }
        }
    ------------------------------------------------------
    event($event, $payload = [], $halt = false)
    event(new ExampleEvent);






QUEUES/JOBS
===============================================================================================================  
    vendor/laravel/lumen-framework/config/queue.php
    ------------------------------------------------------
    database
        php artisan queue:table
        php artisan migrate
    ------------------------------------------------------
    redis
        composer require predis/predis (~1.0)
        composer require illuminate/redis (5.4.*)
        bootstrap/app.php
            $app->register(Illuminate\Redis\RedisServiceProvider::class);
    ------------------------------------------------------
    namespace App\Jobs;
    class MyJob extends Job
    {
        public $tries = 5;
        public $timeout = 120;
        public function __construct($param) {...}
        public function handle() {...}
    }
    ------------------------------------------------------
    $job = (new MyJob(...))
        ->delay(Carbon::now()->addMinutes(10))
        ->onQueue('emails')
        ->onConnection('sqs')
    dispatch($job);
    ------------------------------------------------------
    php artisan queue:work
    php artisan queue:work redis --queue=emails
    php artisan queue:work --queue=high,low
    php artisan queue:restart
    php artisan queue:work --timeout=60
    php artisan queue:work --sleep=3
    ------------------------------------------------------





SERVICE PROVIDERS
===============================================================================================================
    public function register()
    {
        $this->app->singleton(MyClass::class, function ($app) {return new Foo() });
    }
    public function boot() {...}
    bind, singleton, instance
    $instance = app(Something::class);




VALIDATION
===============================================================================================================
    $this->validate($request, ['name' => 'required', 'email' => 'required|email|unique:users']);
    https://lumen.laravel.com/docs/5.1/validation#available-validation-rules

    

ENCRYPTION
===============================================================================================================
    use Illuminate\Support\Facades\Crypt;
    'secret' => Crypt::encrypt($request->secret)
    use Illuminate\Contracts\Encryption\DecryptException;
    $decrypted = Crypt::decrypt($encryptedValue);





TESTING
===============================================================================================================
    $factory->define('App\User', function ($faker) {
        return [
            'name' => $faker->name,
            'email' => $faker->email,
        ];
    });
    $factory->defineAs('App\User', 'admin', function ($faker) use ($factory) {
        $user = $factory->raw('App\User');
        return array_merge($user, ['admin' => true]);
    });
    ------------------------------------------------------
    $user = factory('App\User')->make();
    $user = factory('App\User')->create();
    $user = factory('App\User')->make(['name' => 'Abigail',]);
    $user = factory('App\User')->create(['name' => 'Abigail',]);
    $users = factory('App\User', 3)->make();
    $user = factory('App\User', 'admin')->make();
    $users = factory('App\User', 'admin', 3)->make();
    $users = factory('App\User', 3)
        ->create()
        ->each(function($u) {$u->posts()->save(factory('App\Post')->make());});    
    $author->books()->save(factory(App\Book::class)->make());        
    ------------------------------------------------------
    use Laravel\Lumen\Testing\DatabaseMigrations;
    use Laravel\Lumen\Testing\DatabaseTransactions;
    class ExampleTest extends TestCase
    {
        use DatabaseMigrations;
        use DatabaseTransactions;
        public function testBasicExample()
        {
            $this->call('GET', '/');
            $this->call('POST', '/user', ['name' => 'Taylor']);
            $this->actingAs($user)->get('/user');
            $this->json('POST', '/user', ['name' => 'Sally'])
                    ->seeJson([
                        'created' => true,
                    ]);
                    ->seeJsonEquals([
                        'created' => true,
                    ]);
            $this->assertEquals(200, $response->status());
            $this->assertNotRegExp('/regex_here/',$this->response->getContent(), 'Test message');     
            $this->assertTrue( $this->response->headers->has($header),"Response should have the header '{$header}' but does not.");                   
            $this->seeInDatabase('users', ['email' => 'sally@foo.com']);
            $this->withoutEvents();
            $this->expectsEvents('App\Events\UserRegistered');
            $this->expectsJobs('App\Jobs\PurchasePodcast');
        }
    }

    $faker
    ------------------------------------------------------
    \vendor\fzaninotto\faker\src\Faker\Generator.php

    phpunit.xml
    ------------------------------------------------------
    <php>
        <env name="DB_DATABASE" value="ddsweb2_testing"/>
    </php>



WORKFLOW
===============================================================================================================
Controller tests
    migrations & models to support
        php artisan make:migration create_orders_table --create=orders
        php artisan migrate
        composer dump-autoload
        php artisan migrate:refresh
        php artisan db:seed



to do
--------------------
lumen
    + filter customers on name, address, city, state, account_num, sales_rep

react
    + sagas to access apis after apis done
    
